import { Injectable } from '@angular/core';
import { of, map, tap } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class StateService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.statesWithFlag$ = this.httpClient //
            .get('assets/mockdata/statesWithFlag.json'); // angular support asset in lib since v9
        // .get('../data/statesWithFlag.json') as Observable<UsState[]>;
    }
    getUsStates() {
        return this.statesWithFlag$;
    }
    searchUsStates(term) {
        console.log('searchStates ....', term);
        if (term === '') {
            return of([]);
        }
        return this.getUsStates().pipe(map((items) => {
            return (items.filter((item) => {
                // console.log('searchState ...', term, item.name.toLowerCase().indexOf(term.toLowerCase()));
                return item.stateName.toLowerCase().indexOf(term.toLowerCase()) >= 0;
            }) || []);
        }), tap((items) => console.log('search result.size: ', (items && items.length) || '0'))
        // tap((items) => console.log('search result.size: ', items))
        );
    }
    getUsStateCity() {
        return this.httpClient.get('assets/mockdata/cities.json').pipe(
        // return this.httpClient.get('../data/cities.json').pipe( // angular support asset in lib since v9
        map((data) => {
            let statesData;
            let states = [];
            // console.log('Loading states and cities ..... ', data);
            if (data) {
                statesData = Object.entries(data).sort();
                let sIdx = 0;
                statesData.forEach((stateData) => {
                    // console.log(`stateData[0]: `, stateData[0]);
                    // console.log(`stateData[1]: `, stateData[1]);
                    const state = this.makeUsState(sIdx, stateData[0]);
                    sIdx++;
                    let cIdx = 0;
                    stateData[1].sort().forEach((cityData) => {
                        const city = this.makeUsCityWithStateName(cIdx, cityData, state.stateName);
                        cIdx++;
                        state.cities.push(city);
                    });
                    states.push(state);
                });
            }
            // console.log(`StateService, getUsStateCity, states: `, states);
            console.log('StateService, getUsStateCity result.size: ', (states && states.length) || '0');
            return states;
        }));
    }
    getUsStateCitySlice(indexes) {
        return this.getUsStateCity().pipe(map((items) => {
            const result = [];
            items.forEach((item) => {
                if (indexes.includes(item.id)) {
                    result.push(item);
                }
            });
            return result;
        }));
    }
    getUsCities() {
        let cities = [];
        let retCities = [];
        return this.getUsStateCity().pipe(map((states) => {
            // console.log(`states: `, states);
            states.forEach((state) => {
                state.cities.forEach((cityData) => {
                    // console.log(`cityData: `, cityData);
                    const newCity = this.makeUsCityWithStateName(0, cityData.cityName, cityData.inStateName);
                    cities.push(cityData);
                });
            });
            cities.sort((a, b) => a.cityName.localeCompare(b.cityName));
            let cIdx = 0;
            cities.forEach((city) => {
                const newCity = this.makeUsCityWithStateName(cIdx, city.cityName, city.inStateName);
                cIdx++;
                retCities.push(newCity);
            });
            console.log(`Num of cities: `, retCities.length);
            return retCities;
        }));
    }
    makeUsState(idx, stateName) {
        const state = {};
        state.id = idx;
        state.stateName = stateName;
        state.cities = [];
        return state;
    }
    makeUsCity(idx, cityName) {
        const city = {};
        city.id = idx;
        city.cityName = cityName;
        return city;
    }
    makeUsCityWithStateName(idx, cityName, stateName) {
        const city = this.makeUsCity(idx, cityName);
        city.inStateName = stateName;
        return city;
    }
}
StateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: StateService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
StateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: StateService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: StateService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,