import { Injectable } from '@angular/core';
import { of, Subject, delay, take, switchMap, shareReplay, BehaviorSubject, timer, takeUntil, tap, } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class SharedDataService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.TIMER_REFRESH = 1 * 60 * 60 * 1000;
        this.onDestroy$ = new Subject();
        this._itemData$ = new BehaviorSubject(undefined);
        this.timer$ = timer(this.TIMER_REFRESH, this.TIMER_REFRESH).pipe(takeUntil(this.onDestroy$));
        this.defaultRandomItemSearchRs = {
            resultList: [
                {
                    id: -1,
                    name: '',
                    desc: '',
                    text: '',
                    price: -1,
                    imageUrl: '',
                    quantity: -1,
                },
            ],
        };
        this.dataSource$ = this.getRandomItems(50).pipe(take(1));
        this.itemReplay$ = this._itemData$.pipe(switchMap((resp) => this.dataSource$), 
        // switchMapTo(this.dataSource$),
        shareReplay(1));
        this.timer$.subscribe((x) => this.updateData());
    }
    updateData() {
        this._itemData$.next(undefined);
    }
    getRandomItems(numOfItems, delayInMs) {
        const items = this.makeMockRandomItems(numOfItems);
        if (!delayInMs) {
            return of(items);
        }
        return of(items).pipe(delay(delayInMs));
    }
    searchRandomItems(searchText) {
        if (!searchText || searchText === '' || searchText.length < 1) {
            return of(this.defaultRandomItemSearchRs);
        }
        // if 30000, then browser freezing when rendering search result items because too many
        const items = this.makeMockRandomItems(300).filter((item) => item.name.includes(searchText));
        const result = { resultList: items };
        return of(result).pipe(tap((resp) => console.log('searchText: ', searchText, 'returning: ', resp.resultList.length)), delay(2000));
    }
    makeMockRandomItems(numOfItems) {
        if (!numOfItems) {
            numOfItems = 20;
        }
        const items = [];
        for (let i = 0; i < numOfItems; i++) {
            items.push({
                id: i,
                name: 'randomItem name ' + i,
                desc: 'randomItem desc ' + i,
                text: 'randomItem text ' + i,
                price: i,
                imageUrl: 'randomItem imageUrl ' + i,
                quantity: i,
            });
        }
        return items;
    }
    getNavBarConfig() {
        return this.httpClient.get('assets/config/nav-bar-config.json').pipe(tap((items) => console.log('getNavBarConfig result.size: ', (items && items.length) || '0')));
    }
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
SharedDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: SharedDataService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
SharedDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: SharedDataService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: SharedDataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,