import { Injectable } from '@angular/core';
import { take, of, delay } from 'rxjs';
import * as i0 from "@angular/core";
export class CarDataService {
    constructor() {
        this.indexSeed = 4; // at least length of following
        this.brand = ['Toyota', 'Chevy', 'GM', 'Buick', 'Honda'];
        this.model = [
            'model1',
            'model2',
            'model3',
            'model4',
            'model5',
            'model6',
            'model7',
            'model8',
        ];
        this.years = ['2018', '2019', '2020', '2021', '2022', '2023'];
        this.dataSource$ = this.getCarItems(50).pipe(take(1));
    }
    getCarItems(numOfItems, delayInMs) {
        const items = this.makeMockItems(numOfItems);
        if (!delayInMs) {
            return of(items);
        }
        return of(items).pipe(delay(delayInMs));
    }
    getSortedCarItems(items, compareFn) {
        if (!compareFn) {
            compareFn = (a, b) => {
                return a.brand > b.brand ? 1 : b.brand > a.brand ? -1 : 0;
            };
        }
        return compareFn ? items.sort(compareFn) : items;
    }
    makeMockItems(numOfItems) {
        if (!numOfItems) {
            numOfItems = 20;
        }
        const items = [];
        for (let i = 0; i < numOfItems; i++) {
            const brand = this.brand[i % this.brand.length];
            const model = this.model[i % this.model.length];
            const year = this.years[i % this.years.length];
            items.push({
                id: i,
                brand: brand,
                model: model,
                year: year,
            });
        }
        return items;
    }
    getCarGroupsByBrand(cars, sort) {
        const result = [];
        for (const { brand, model, year } of cars) {
            let resultItem = result[brand];
            if (!resultItem) {
                resultItem = { brand: brand, items: [] };
            }
            resultItem.items.push({ brand, model, year });
        }
        return sort
            ? result.sort((a, b) => (a.brand > b.brand ? 1 : b.brand > a.brand ? -1 : 0))
            : result;
    }
    getCarItemsGroupByBrand(cars) {
        const carGroups = this.getCarGroupsByBrand(cars, true);
        const result = [];
        carGroups.map((groupItem) => {
            const carItems = groupItem.items;
            result.concat(carItems);
        });
        return result;
    }
}
CarDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CarDataService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
CarDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CarDataService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: CarDataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9vb3BzLWxpYjAwMi9zcmMvbGliL3NoYXJlZC9zZXJ2aWNlcy9jYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQWMsRUFBRSxFQUFFLEtBQUssRUFBb0IsTUFBTSxNQUFNLENBQUM7O0FBTXJFLE1BQU0sT0FBTyxjQUFjO0lBSDNCO1FBSVUsY0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLCtCQUErQjtRQUM5QyxVQUFLLEdBQWEsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDOUQsVUFBSyxHQUFhO1lBQ3hCLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtZQUNSLFFBQVE7WUFDUixRQUFRO1NBQ1QsQ0FBQztRQUNNLFVBQUssR0FBYSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFcEUsZ0JBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQXVFekQ7SUFyRUMsV0FBVyxDQUFDLFVBQW1CLEVBQUUsU0FBa0I7UUFDakQsTUFBTSxLQUFLLEdBQVUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEI7UUFDRCxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENB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LFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFtQixFQUFFLEVBQUU7WUFDcEMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztZQUNqQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7NEdBL0VVLGNBQWM7Z0hBQWQsY0FBYyxjQUZiLE1BQU07NEZBRVAsY0FBYztrQkFIMUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHRha2UsIE9ic2VydmFibGUsIG9mLCBkZWxheSwgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBDYXIsIENhckdyb3VwLCBSYW5kb21JdGVtIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDYXJEYXRhU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBpbmRleFNlZWQgPSA0OyAvLyBhdCBsZWFzdCBsZW5ndGggb2YgZm9sbG93aW5nXHJcbiAgcHJpdmF0ZSBicmFuZDogc3RyaW5nW10gPSBbJ1RveW90YScsICdDaGV2eScsICdHTScsICdCdWljaycsICdIb25kYSddO1xyXG4gIHByaXZhdGUgbW9kZWw6IHN0cmluZ1tdID0gW1xyXG4gICAgJ21vZGVsMScsXHJcbiAgICAnbW9kZWwyJyxcclxuICAgICdtb2RlbDMnLFxyXG4gICAgJ21vZGVsNCcsXHJcbiAgICAnbW9kZWw1JyxcclxuICAgICdtb2RlbDYnLFxyXG4gICAgJ21vZGVsNycsXHJcbiAgICAnbW9kZWw4JyxcclxuICBdO1xyXG4gIHByaXZhdGUgeWVhcnM6IHN0cmluZ1tdID0gWycyMDE4JywgJzIwMTknLCAnMjAyMCcsICcyMDIxJywgJzIwMjInLCAnMjAyMyddO1xyXG5cclxuICBwdWJsaWMgZGF0YVNvdXJjZSQgPSB0aGlzLmdldENhckl0ZW1zKDUwKS5waXBlKHRha2UoMSkpO1xyXG5cclxuICBnZXRDYXJJdGVtcyhudW1PZkl0ZW1zPzogbnVtYmVyLCBkZWxheUluTXM/OiBudW1iZXIpOiBPYnNlcnZhYmxlPENhcltdPiB7XHJcbiAgICBjb25zdCBpdGVtczogQ2FyW10gPSB0aGlzLm1ha2VNb2NrSXRlbXMobnVtT2ZJdGVtcyk7XHJcbiAgICBpZiAoIWRlbGF5SW5Ncykge1xyXG4gICAgICByZXR1cm4gb2YoaXRlbXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9mKGl0ZW1zKS5waXBlKGRlbGF5KGRlbGF5SW5NcykpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U29ydGVkQ2FySXRlbXMoaXRlbXM6IENhcltdLCBjb21wYXJlRm4/OiAoYTogQ2FyLCBiOiBDYXIpID0+IG51bWJlcik6IENhcltdIHtcclxuICAgIGlmICghY29tcGFyZUZuKSB7XHJcbiAgICAgIGNvbXBhcmVGbiA9IChhOiBDYXIsIGI6IENhcikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhLmJyYW5kID4gYi5icmFuZCA/IDEgOiBiLmJyYW5kID4gYS5icmFuZCA/IC0xIDogMDtcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21wYXJlRm4gPyBpdGVtcy5zb3J0KGNvbXBhcmVGbikgOiBpdGVtcztcclxuICB9XHJcblxyXG4gIG1ha2VNb2NrSXRlbXMobnVtT2ZJdGVtcz86IG51bWJlcik6IENhcltdIHtcclxuICAgIGlmICghbnVtT2ZJdGVtcykge1xyXG4gICAgICBudW1PZkl0ZW1zID0gMjA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBpdGVtczogQ2FyW10gPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZJdGVtczsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGJyYW5kID0gdGhpcy5icmFuZFtpICUgdGhpcy5icmFuZC5sZW5ndGhdO1xyXG4gICAgICBjb25zdCBtb2RlbCA9IHRoaXMubW9kZWxbaSAlIHRoaXMubW9kZWwubGVuZ3RoXTtcclxuICAgICAgY29uc3QgeWVhciA9IHRoaXMueWVhcnNbaSAlIHRoaXMueWVhcnMubGVuZ3RoXTtcclxuICAgICAgaXRlbXMucHVzaCh7XHJcbiAgICAgICAgaWQ6IGksXHJcbiAgICAgICAgYnJhbmQ6IGJyYW5kLFxyXG4gICAgICAgIG1vZGVsOiBtb2RlbCxcclxuICAgICAgICB5ZWFyOiB5ZWFyLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBpdGVtcztcclxuICB9XHJcblxyXG4gIGdldENhckdyb3Vwc0J5QnJhbmQoY2FyczogQ2FyW10sIHNvcnQ/OiBib29sZWFuKTogQ2FyR3JvdXBbXSB7XHJcbiAgICBjb25zdCByZXN1bHQ6IENhckdyb3VwW10gPSBbXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHsgYnJhbmQsIG1vZGVsLCB5ZWFyIH0gb2YgY2Fycykge1xyXG4gICAgICBsZXQgcmVzdWx0SXRlbSA9IHJlc3VsdFticmFuZF07XHJcbiAgICAgIGlmICghcmVzdWx0SXRlbSkge1xyXG4gICAgICAgIHJlc3VsdEl0ZW0gPSB7IGJyYW5kOiBicmFuZCwgaXRlbXM6IFtdIH07XHJcbiAgICAgIH1cclxuICAgICAgcmVzdWx0SXRlbS5pdGVtcy5wdXNoKHsgYnJhbmQsIG1vZGVsLCB5ZWFyIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzb3J0XHJcbiAgICAgID8gcmVzdWx0LnNvcnQoKGEsIGIpID0+IChhLmJyYW5kID4gYi5icmFuZCA/IDEgOiBiLmJyYW5kID4gYS5icmFuZCA/IC0xIDogMCkpXHJcbiAgICAgIDogcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2FySXRlbXNHcm91cEJ5QnJhbmQoY2FyczogQ2FyW10pOiBDYXJbXSB7XHJcbiAgICBjb25zdCBjYXJHcm91cHM6IENhckdyb3VwW10gPSB0aGlzLmdldENhckdyb3Vwc0J5QnJhbmQoY2FycywgdHJ1ZSk7XHJcbiAgICBjb25zdCByZXN1bHQ6IENhcltdID0gW107XHJcblxyXG4gICAgY2FyR3JvdXBzLm1hcCgoZ3JvdXBJdGVtOiBDYXJHcm91cCkgPT4ge1xyXG4gICAgICBjb25zdCBjYXJJdGVtcyA9IGdyb3VwSXRlbS5pdGVtcztcclxuICAgICAgcmVzdWx0LmNvbmNhdChjYXJJdGVtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgLy8gc29ydENhckZuOiBPcGVyYXRvckZ1bmN0aW9uPHN0cmluZywgQ2FyW10+ID0gKGZpZWxkTmFtZTogT2JzZXJ2YWJsZTxzdHJpbmc+KSA9PlxyXG5cclxuICAvLyBzb3J0Q2FycyhjYXJzOiBDYXJbXSwgc29ydEZuOikge1xyXG5cclxuICAvLyB9XHJcbn1cclxuIl19